/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exactool.ui;

//import exactool.datahandler.ExacData;
import exactool.datahandler.ExternalVariant;
import exactool.datahandler.dataobjects.SearchData;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 *
 * @author flip
 */
public class GeneVisualizationPanel extends javax.swing.JPanel {

    GeneImagePanel gip = new GeneImagePanel();
    ExacToolFrame parent;
    String selectedGene = null;
    HashMap displayToId = new HashMap();
    HashSet externalVariants = new HashSet();
    //ExacData selectedItem = null;
    /**
     * Creates new form GeneVisualizationPanel
     */
    public GeneVisualizationPanel(ExacToolFrame parent) {
        initComponents();
        this.parent = parent;
        displayPane.setViewportView(gip);        
        jSplitPane1.setResizeWeight(0);
        gip.setGeneVisualizationPanel(this);
    }

    public void setGeneList(Vector genes){
        java.util.Collections.sort(genes);
        DefaultListModel listModel = new DefaultListModel();
        for(int g=0; g<genes.size(); g++)
        {
            //ExacData ed = (ExacData)genes.get(g);
            SearchData ed = (SearchData)genes.get(g);            
            displayToId.put(ed.toString(), ed.id);
            listModel.addElement(ed.toString());        
        }
        geneSelectList.setModel(listModel);
        if(selectedGene==null && genes.size()>0)
            selectedGene = genes.get(0).toString();
            
        GeneVisualizationPanel.this.setSelectedItem(selectedGene);
        
    }
    
    public void setSelectedItem(String gene){
        selectedGene = gene;
        if(selectedGene!=null && parent.searchResultMap.containsKey(selectedGene))        {
            
            geneSelectList.setSelectedValue(selectedGene, true);
            geneSelectListValueChanged(null);
        }        
        
    }
    
    public void setSelectedId(String gene){
        selectedGene = gene;
        if(selectedGene!=null && parent.searchResultMap.containsKey(selectedGene))        {
            
            geneSelectList.setSelectedValue(selectedGene, true);
            geneSelectListValueChanged(null);
        }        
        
    }
    
    public String getSelectedItem(){
        return geneSelectList.getSelectedValue();
        //return selectedGene;
    }
    
    public String getSelectedId(){
        String result = null;
        if(geneSelectList.getSelectedValue()!=null)
            result = displayToId.get(geneSelectList.getSelectedValue()).toString();
        return result;
    }
    
    public void updateGeneData(){        
        geneSelectListValueChanged(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        geneSelectList = new javax.swing.JList<>();
        loadVarButton = new javax.swing.JButton();
        clearVarButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        zoomLabel = new javax.swing.JLabel();
        displayPane = new javax.swing.JScrollPane();
        zoomSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setResizeWeight(0.8);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        geneSelectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                geneSelectListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(geneSelectList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        loadVarButton.setText("Load External Variant List");
        loadVarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadVarButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(loadVarButton, gridBagConstraints);

        clearVarButton.setText("Clear External Variants");
        clearVarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearVarButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(clearVarButton, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        zoomLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        zoomLabel.setText("100%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(zoomLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(displayPane, gridBagConstraints);

        zoomSlider.setMaximum(2000);
        zoomSlider.setMinimum(100);
        zoomSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        zoomSlider.setPaintLabels(true);
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(zoomSlider, gridBagConstraints);

        jLabel1.setText("2000%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("100%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel1.add(jLabel2, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel1);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    public void triggerZoomChange(){
        this.zoomSliderStateChanged(null);
    }
    private void geneSelectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_geneSelectListValueChanged
        selectedGene = geneSelectList.getSelectedValue(); 
        if(selectedGene==null && geneSelectList.getModel().getSize()>0)
        {
            geneSelectList.setSelectedIndex(0);
            selectedGene = geneSelectList.getModel().getElementAt(0);
            
        }
            
        if(selectedGene==null)
            return;
        
        selectedGene = (String) displayToId.get(selectedGene);
        //ExacData gd = parent.searchResultMap.get(selectedGene);
        SearchData gd = parent.searchResultMap.get(selectedGene);
        if(gd.features==null)
            JOptionPane.showMessageDialog(this, "No data was retrieved for '"+selectedGene+"'. Please make sure the entry is valid.");
        else
        {
            //gip.chr = -1;
            gip.chr = null;
            gip.setFeatures(gd.features);
            gip.setDisplayedVariants(gd.getDisplayedData());        
            //System.out.println("Updated gene and variant count: "+selectedGene+" -> "+gd.getDisplayedData().length);
            gip.repaint();
            parent.updateLabel();
        }
        
    }//GEN-LAST:event_geneSelectListValueChanged

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
        int rawZoomLevel = zoomSlider.getValue();
        if(evt!=null)   
            rawZoomLevel = (int)((JSlider)evt.getSource()).getValue();   
        zoomLabel.setText(rawZoomLevel+"%");        
        float zoomfactor = (float)((rawZoomLevel/100f)/gip.getZoomLevel());        
        gip.zoom(null, zoomfactor, 1f, 20f);            
        
        this.updateGeneData();
        
    }//GEN-LAST:event_zoomSliderStateChanged

    private void loadVarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadVarButtonActionPerformed
        try
        {            
            String selFile = parent.selectFile(false);
            if(selFile!=null)
            {
                //BufferedReader varReader = new BufferedReader(new FileReader(parent.selectFile(false)));
                BufferedReader varReader = new BufferedReader(new FileReader(selFile));
                //String line = varReader.readLine(); //header?
                String header[] = null;
                boolean firstLine = true;
                String line = null;
                while( (line = varReader.readLine()) !=null)
                {                
                    String tokens[] = line.split("\t");
                    if(firstLine)
                    {
                        if(tokens[0].equalsIgnoreCase("CHR"))                        
                            header=tokens;                    
                        firstLine = false;
                    }
                    else if(tokens.length>1)
                    {
                        ExternalVariant v = new ExternalVariant();
                        //v.chr = Integer.parseInt(tokens[0]);
                        v.chr = tokens[0];
                        v.start = Integer.parseInt(tokens[1]);
                        v.end = Integer.parseInt(tokens[2]);                        
                        for(int t=3; t<tokens.length; t++){
                            if(header==null)
                                v.addInfo("col_"+(t+1), tokens[t]);
                            else v.addInfo(header[t], tokens[t]);
                        }
                        externalVariants.add(v);
                    }
                }
                varReader.close();
                gip.revalidate();
                gip.repaint();           
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_loadVarButtonActionPerformed

    private void clearVarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearVarButtonActionPerformed
        externalVariants.clear();
        gip.revalidate();
        gip.repaint();
    }//GEN-LAST:event_clearVarButtonActionPerformed

    public void setZoomLevel(double level){        
        zoomSlider.setValue((int)(100*level));        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearVarButton;
    private javax.swing.JScrollPane displayPane;
    private javax.swing.JList<String> geneSelectList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loadVarButton;
    private javax.swing.JLabel zoomLabel;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables
}
